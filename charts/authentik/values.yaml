replicas: 1

image:
  name: docker.beryju.org/authentik/server
  tag: gh-next
  pullPolicy: IfNotPresent

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  hosts:
    - host: authentik.domain.tld
      paths:
        - path: "/"
          pathType: Prefix

authentik:
  log_level: info
  secret_key: ""
  email:
    host: ""
    port: ""
    username: ""
    use_tls: false
    use_ssl: false
    timeout: 30
    from: ""
  outposts:
    docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
  error_reporting:
    # This sends anonymous usage-data, stack traces on errors and
    # performance data to sentry.beryju.org, and is fully opt-in
    enabled: false
    environment: "k8s"
    send_pii: false
  postgresql:
    host: ""
    name: ""
    user: ""
    password: ""
    s3_backup:
      access_key: ""
      bucket: ""
      region: ""
      host: ""
  redis:
    host: ""
    password: ""

# see configuration options at https://goauthentik.io/docs/installation/configuration/
env: {}
# AUTHENTIK_VAR_NAME: VALUE

envFrom: []
#  - configMapRef:
#      name: special-config

envValueFrom: {}
#  AUTHENTIK_VAR_NAME:
#    secretKeyRef:
#      key: password
#      name: my-secret

service:
  enabled: true
  type: ClusterIP
  port: 80
  name: http
  protocol: TCP
  labels: {}
  annotations: {}

volumes: []

volumeMounts: []

affinity: {}

resources:
  server: {}
  worker: {}

livenessProbe:
  enabled: true
  httpGet:
    path: /-/health/live/
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30

readinessProbe:
  enabled: true
  httpGet:
    path: /-/health/ready/
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30

serviceAccount:
  create: true

prometheus:
  serviceMonitor:
    create: false
    interval: 10s
    scrapeTimeout: 3s
    secret:
      name: ""
      # username currently _MUST_ be "monitor"
      usernameKey: ""
      passwordKey: ""
  rules:
    create: false

geoip:
  enabled: false
  schedule: "0 */8 * * *"
  accountId: ""
  licenseKey: ""
  editionIds: "GeoLite2-City"

postgresql:
  enabled: false
  # postgresqlUsername: ""
  # postgresqlPassword: ""
  # postgresqlDatabase: ""
  # persistence:
  #   enabled: true
  #   storageClass:
  #   accessModes:
  #     - ReadWriteOnce
redis:
  enabled: false
  auth:
    enabled: false
